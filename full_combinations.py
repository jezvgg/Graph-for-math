import numpy as np
from itertools import permutations

# Для примера я взял матрицы графов, которые нам давали на математике
# Один из них я перемешал вершины, чтоб было сложно сопаставлять их

# Перемешанный граф
matrix = np.array([
    [0,1,1,0,1,1],
    [1,0,0,1,1,1],
    [1,0,0,1,1,1],
    [0,1,1,0,1,1],
    [1,1,1,1,0,0],
    [1,1,1,1,0,0]
])

# Не перемешанный граф, с которым будем сравнивать
our_matrix = np.array([
    [0,1,1,0,1,1],
    [1,0,1,1,0,1],
    [1,1,0,1,1,0],
    [0,1,1,0,1,1],
    [1,0,1,1,0,1],
    [1,1,0,1,1,0]
])

# permutations - возращает все перестановки, возможно с повторениями
# я не смотрел, может можно заменить на другую и ускорить убрав повтарения
for combo in permutations(range(6)):
    # создаём новую матрицу с изменёными осями, в неё сначала меняем строки
    new_matrix = matrix[list(combo)]
    # потом матрицу с изменёными строками, в неё меняем столбцы
    new_matrix = new_matrix[:, list(combo)]
    # Обычное == возращает матрицу схожести элементов, а этот метод, совпадение матриц
    if np.array_equal(our_matrix, new_matrix):
        print(combo)
        print(new_matrix)
        print(our_matrix)
        break
else:
    # else после for срабатывает только если весь for сработал и не было break
    print("Matrix not isometric")